package require tcltest
namespace import ::tcltest::test ::tcltest::cleanupTests ::tcltest::testConstraint

# Load all .tcl files
package require fileutil
set files [lsort [fileutil::findByPattern "~/qcode-tcl/tcl" "*.tcl"]]
foreach file $files {
    source $file
}
namespace import ::qc::*

test format_timestamp_iso-1.0 {
    format_timestamp_iso relative
} -body {
    format_timestamp_iso 1603277566
} -result "2020&#8209;10&#8209;21 11:52:46"

test format_timestamp_iso-1.1 {
    format_timestamp_iso uk
} -body {
    format_timestamp_iso "23/5/12 11:11:11"
} -result "2012&#8209;05&#8209;23 11:11:11"

test format_timestamp_iso-1.2 {
    format_timestamp_iso long
} -body {
    format_timestamp_iso "23rd May 2012 11:11:11"
} -result "2012&#8209;05&#8209;23 11:11:11"


test format_timestamp_http-1.0 {
    format_timestamp_http relative
} -body {
    format_timestamp_http 1603277566
} -result "Wed, 21 Oct 2020 10:52:46 GMT"

test format_timestamp_http-1.1 {
    format_timestamp_http uk
} -body {
    format_timestamp_http "23/5/12 11:11:11"
} -result "Wed, 23 May 2012 10:11:11 GMT"

test format_timestamp_http-1.2 {
    format_timestamp_http iso
} -body {
    format_timestamp_http "2012-05-23 11:11:11"
} -result "Wed, 23 May 2012 10:11:11 GMT"

test format_timestamp_http-1.3 {
    format_timestamp_http iso2
} -body {
    format_timestamp_http "2012-05-23T11:11:11"
} -result "Wed, 23 May 2012 10:11:11 GMT"


test format_timestamp_relative-1.0 {
    format_timestamp_relative same-day
} -body {
    format_timestamp_relative "2020-10-21 12:21" "2020-10-21 21:21"
} -result "21:21"

test format_timestamp_relative-1.1 {
    format_timestamp_relative tomorrow
} -body {
    format_timestamp_relative "2020-10-21 12:21" "2020-10-22 21:21"
} -result "Thu 21:21"

test format_timestamp_relative-1.2 {
    format_timestamp_relative next year
} -body {
    format_timestamp_relative "2020-10-21 12:21" "2021-10-22 21:21"
} -result "2021-10-22"

test format_timestamp2hour-1.0 {
    format_timestamp2hour 
} -body {
    format_timestamp2hour "2020-10-21 12:21:34"
} -result "2020&#8209;10&#8209;21 12:21"

test format_timestamp2hour-1.1 {
    format_timestamp2hour -text
} -body {
    format_timestamp2hour -text "2020-10-21 12:21:34"
} -result "2020-10-21 12:21"

test format_timestamp_relative_age-1.0 {
    format_timestamp_relative_age years
} -body {
    format_timestamp_relative_age "2020-07-22" "2017-07-22"
} -result "3 years"

test format_timestamp_relative_age-1.1 {
    format_timestamp_relative_age months
} -body {
    format_timestamp_relative_age "2020-07-22" "2020-04-22"
} -result "3 months"

test format_timestamp_relative_age-1.2 {
    format_timestamp_relative_age month
} -body {
    format_timestamp_relative_age "2020-07-22" "2020-06-22"
} -result "1 month"

test format_timestamp_relative_age-1.3 {
    format_timestamp_relative_age weeks
} -body {
    format_timestamp_relative_age "2020-07-22" "2020-07-01"
} -result "3 weeks"

test format_timestamp_relative_age-1.4 {
    format_timestamp_relative_age week
} -body {
    format_timestamp_relative_age "2020-07-22" "2020-07-15"
} -result "1 week"

test format_timestamp_relative_age-1.5 {
    format_timestamp_relative_age days
} -body {
    format_timestamp_relative_age "2020-07-22" "2020-07-19"
} -result "3 days"

test format_timestamp_relative_age-1.6 {
    format_timestamp_relative_age day
} -body {
    format_timestamp_relative_age "2020-07-22" "2020-07-21"
} -result "1 day"

test format_timestamp_relative_age-1.7 {
    format_timestamp_relative_age future
} -body {
    format_timestamp_relative_age "2020-07-22" "2020-07-23"
} -result "-1 days"


cleanupTests
