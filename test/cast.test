package require tcltest
package require mock_ns
namespace import ::tcltest::test ::tcltest::cleanupTests ::tcltest::testConstraint mock_ns::*

# Load all .tcl files
set files [lsort [glob -nocomplain "~/qcode-tcl/tcl/*.tcl"]]
foreach file $files {
    source $file
}
namespace import ::qc::*

test cast-integer-1.0 {cast integer commas} {qc::cast integer 2,305} 2305
test cast-integer-1.1 {cast integer leading zeros} {qc::cast integer "001"} 1
test cast-integer-1.2 {cast integer percentages} {qc::cast integer "10%"} 10
test cast-integer-1.3 {cast integer e notation} {qc::cast integer "43e2"} 4300
test cast-integer-1.4 {cast integer upper limit} {qc::cast integer "2147483647"} 2147483647
test cast-integer-1.5 {cast integer outside integer range} -body {qc::cast integer "2147483648"} -result "Could not cast 2147483648 to integer." -returnCodes error 
test cast-integer-1.6 {cast integer outside integer range} -body {qc::cast integer "2e100"} -result "Could not cast 2e100 to integer." -returnCodes error 
test cast-integer-1.7 {cast integer lower limit} {qc::cast integer "-2147483648"} -2147483648
test cast-integer-1.8 {cast integer outside integer range} -body {qc::cast integer "-2147483649"} -result "Could not cast -2147483649 to integer." -returnCodes error 
test cast-integer-1.9 {cast integer leading zeros} {qc::cast integer "-08"} -8
test cast-integer-1.10 {cast integer leading zeros} {qc::cast integer "-1.008"} -1
test cast-integer-1.10 {cast integer leading zeros} {qc::cast integer "0008"} 8


test cast-decimal-1.0 {cast decimal commas} {qc::cast decimal "2,305.25"} 2305.25
test cast-decimal-1.1 {cast decimal percentages} {qc::cast decimal "100%"} 100
test cast-decimal-1.2 {cast decimal exponent} {qc::cast decimal 3.689e4} 36890
test cast-decimal-1.3 {cast decimal exponent precision scale} {qc::cast decimal -precision 6 -scale 2 3e3} 3000.00
test cast-decimal-1.4 {cast decimal precision} {qc::cast decimal -precision 4 3} 3
test cast-decimal-1.5 {cast decimal precision} {qc::cast decimal -precision 1 3} 3 
test cast-decimal-1.6 {cast decimal precision scale} -body {qc::cast decimal -precision 4 -scale 4 3} -result "The resulting number (3.0000) is too large for the given precision (4) and scale (4)." -returnCodes error
test cast-decimal-1.7 {cast decimal precision scale} {qc::cast decimal -precision 4 -scale 2 3} 3.00
test cast-decimal-1.8 {cast decimal precision scale} {qc::cast decimal -precision 4 -scale 2 3.6534} 3.65

# Cast Date
test cast-date-1.0 {cast date forward slashes} {
    qc::cast date 12/5/07
} 2007-05-12
test cast-date-1.1 {cast date relative time} -body {
    qc::cast date yesterday
} -result [clock format [clock scan yesterday] -format "%Y-%m-%d"]
test cast-date-1.2 {cast date long format} {
    qc::cast date "June 23rd 2010"
} 2010-06-23
test cast-date-1.3 {cast date yyyymmdd} {
    qc::cast date 20180412
} 2018-04-12
test cast-date-1.4 {cast date ddmmyyyy} {
    qc::cast date 12042018
} 2018-04-12
test cast-date-1.5 {cast date dd-mm-yyyy} {
    qc::cast date 12-04-2018
} 2018-04-12
test cast-date-1.6 {cast date too many days} {
    qc::cast date 2012-11-31
} 2012-12-01

test cast-timestamp-1.0 {cast timestamp relative time} -body {
    qc::cast timestamp tomorrow
} -result [clock format [clock scan tomorrow] -format "%Y-%m-%d %H:%M:%S"]

test cast-epoch-1.0 {cast epoch empty string} -body {
    qc::cast epoch ""
} -result "Can't cast an empty string to epoch" -returnCodes error 
test cast-epoch-1.1 {cast epoch iso date no delimiter} {qc::cast epoch 20100810} [clock scan "2010-08-10"]
test cast-epoch-1.2 {cast epoch epoch} {qc::cast epoch 1281394800} 1281394800
test cast-epoch-1.3 {cast epoch exact iso date} {qc::cast epoch "2012-06-12"} [clock scan "2012-06-12"]
test cast-epoch-1.4 {cast epoch iso datetime} {qc::cast epoch "2012-06-12 12:12:12"} [clock scan "2012-06-12 12:12:12"]
test cast-epoch-1.4a {cast epoch iso datetime T format} {qc::cast epoch "2012-06-12T12:12:12"} [clock scan "2012-06-12 12:12:12"]
test cast-epoch-1.5 {cast epoch iso datetime with offset} {qc::cast epoch "2012-06-12 12:12:12.777 -06:00"} [clock scan "2012-06-12 12:12:12" -timezone -06:00]
test cast-epoch-1.5a {cast epoch iso datetime with offset & zulu} {qc::cast epoch "2012-06-12 12:12:12Z"} [clock scan "2012-06-12 12:12:12" -timezone +00]
test cast-epoch-1.5b {cast epoch iso datetime with offset T format & zulu} {qc::cast epoch "2012-06-12T12:12:12Z"} [clock scan "2012-06-12 12:12:12" -timezone +00]
test cast-epoch-1.6 {cast epoch iso date time no end anchor} {qc::cast epoch "2012-06-12 12:12:12.777"} [clock scan "2012-06-12 12:12:12"]
test cast-epoch-1.7 {cast epoch forward slash date format} {qc::cast epoch "12/06/12"} [clock scan "2012-06-12"]
test cast-epoch-1.8 {cast epoch forward slash date format long year} {qc::cast epoch "12/06/2012"} [clock scan "2012-06-12"]
test cast-epoch-1.9 {cast epoch relative} {qc::cast epoch "today"} [clock scan today]
test cast-epoch-1.9a {cast epoch relative2} {qc::cast epoch "1 year ago"} [clock scan "1 year ago"]
test cast-epoch-1.10 {cast epoch relaxed1} {qc::cast epoch "12:12:12 22/06/99"} [clock scan "1999-06-22 12:12:12"]
test cast-epoch-1.10a {cast epoch relaxed2} {qc::cast epoch "12:12:12 22/06/1999"} [clock scan "1999-06-22 12:12:12"]
test cast-epoch-1.10b {cast epoch relaxed3} {qc::cast epoch "22 June 1999 12:12:12"} [clock scan "1999-06-22 12:12:12"]
test cast-epoch-1.10c {cast epoch relaxed4} {qc::cast epoch "June 22nd 1999 12:12:12"} [clock scan "1999-06-22 12:12:12"]

#   Aolserver dependent
#   test cast-boolean-1.0 {cast boolean default true} {qc::cast boolean yes} t
#   test cast-boolean-1.1 {cast boolean default false} {qc::cast boolean no} f
#   test cast-boolean-1.2 {cast boolean custom true} {qc::cast boolean 1 Si No} Si

test cast-postcode-1.0 {cast postcode no space} {qc::cast postcode EH123DE} "EH12 3DE"
test cast-postcode-1.1 {cast postcode no space2} {qc::cast postcode EH12DE} "EH1 2DE"
test cast-postcode-1.2 {cast postcode extra zero} {qc::cast postcode "Y043 3AH"} "YO43 3AH"

test cast-creditcard-1.0 {cast creditcard invalid} -body {
    qc::cast creditcard "4213 3222 1121 1112"
} -returnCodes error -result "4213322211211112 is not a valid credit card number"
test cast-creditcard-1.1 {cast creditcard spaces} {qc::cast creditcard "4111 1111 1111 1111"} 4111111111111111


test cast-period-1.0 {qc::cast period ""} -body {qc::cast period ""} -result "Could not parse string \"\" into dates that define a period." -returnCodes error 
test cast-period-1.1 {qc::cast period "Jan"} {qc::cast period "Jan"} [list [date_year now]-01-01 [date_year now]-01-31]
test cast-period-1.2 {qc::cast period "January"} {qc::cast period "January"} [list [date_year now]-01-01 [date_year now]-01-31]
test cast-period-1.3 {qc::cast period "2014"} {qc::cast period "2014"} [list 2014-01-01 2014-12-31]
test cast-period-1.4 {qc::cast period "Jan 2014"} {qc::cast period "Jan 2013"} [list 2013-01-01 2013-01-31]
test cast-period-1.5 {qc::cast period "January 2014"} {qc::cast period "January 2013"} [list 2013-01-01 2013-01-31]
test cast-period-1.6 {qc::cast period "Jan 2014 to March 2014"} {qc::cast period "Jan 2014 to March 2014"} [list 2014-01-01 2014-03-31]
test cast-period-1.7 {qc::cast period "Febuary 2014"} -body {qc::cast period "Febuary 2013"} -result "Could not parse string \"Febuary 2013\" into dates that define a period." -returnCodes error 
test cast-period-1.8 {qc::cast period "1st February 2014 to 14th February 2014"} {qc::cast period "1st February 2014 to 14th February 2014"} [list 2014-02-01 2014-02-14]
test cast-period-1.9 {qc::cast period "1st February 2014"} {qc::cast period "1st February 2014"} [list 2014-02-01 2014-02-01]


test cast-time-1.0 {qc::cast time "00:00:00.000000"} -body {
    qc::cast time "00:00:00.000000"
} -result "00:00:00"

test cast-time-1.1 {qc::cast time "00:00:00"} -body {
    qc::cast time "00:00:00"
} -result "00:00:00"

test cast-time-1.2 {qc::cast time "24:00:00.000000"} -body {
    qc::cast time "24:00:00.000000"
} -result "24:00:00"

test cast-time-1.3 {qc::cast time "24:00:00"} -body {
    qc::cast time "24:00:00"
} -result "24:00:00"

test cast-time-1.4 {qc::cast time "12:34:56.789"} -body {
    qc::cast time "12:34:56.789"
} -result "12:34:56.789"

test cast-time-1.5 {qc::cast time "12:34:56"} -body {
    qc::cast time "12:34:56"
} -result "12:34:56"

test cast-time-1.6 {qc::cast time "12:59"} -body {
    qc::cast time "12:59"
} -result "12:59:00"

test cast-interval-1.0 {qc::cast interval "1 year"} -body {
    qc::cast interval "1 year"
} -result "1 year"

test cast-interval-1.1 {qc::cast interval "3 months -2 days"} -body {
    qc::cast interval "3 months -2 days"
} -result "3 months -2 days"

test cast-interval-1.2 {qc::cast interval "-5 weeks"} -body {
    qc::cast interval "-5 weeks"
} -result "-5 weeks"

test cast-interval-1.3 {qc::cast interval "7"} -body {
    qc::cast interval "7"
} -returnCodes error -result "Could not cast 7 to an interval"

test cast-interval-1.4 {qc::cast interval "last week"} -body {
    qc::cast interval "last week"
} -returnCodes error -result "Could not cast last week to an interval"

test cast-interval-1.5 {qc::cast interval "year"} -body {
    qc::cast interval "year"
} -returnCodes error -result "Could not cast year to an interval"

test cast-s3_uri-1.0 {qc::cast s3_uri: Missing Protocol 1}  {qc::cast s3_uri "bucket/object_key"}      {s3://bucket/object_key}
test cast-s3_uri-1.1 {qc::cast s3_uri: Missing Protocol 2}  {qc::cast s3_uri "/bucket/object_key"}     {s3://bucket/object_key}
test cast-s3_uri-1.2 {qc::cast s3_uri: Upper Case Protocol} {qc::cast s3_uri "S3://bucket/object_key"} {s3://bucket/object_key}
test cast-s3_uri-1.3 {qc::cast s3_uri: No object_key}       {qc::cast s3_uri "bucket"}                 {s3://bucket/}
test cast-s3_uri-1.4 {qc::cast s3_uri: Invalid bucket}     -body {qc::cast s3_uri "%%%%%%%%/object_key"} -returnCodes error -result {Could not cast "%%%%%%%%/object_key" to an s3_uri}
test cast-s3_uri-1.5 {qc::cast s3_uri: Invalid object_key} -body {qc::cast s3_uri "bucket/invalid."}     -returnCodes error -result {Could not cast "bucket/invalid." to an s3_uri}

# next_url
set setup {
    ns_conn _set headers        [ns_set create headers]
    ns_conn _set outputheaders  [ns_set create outputheaders]
}
set cleanup {
    mock_ns::_reset
}

test cast-next_url-1.0 \
    {cast next_url non-legacy 443 relative non-anchored} \
    -setup $setup \
    -cleanup $cleanup \
    -body {
        ns_conn _set protocol "https"
        ns_conn _set headers [ns_set create headers \
                                "Host" "www.qcode.co.uk" \
                             ]
        set next_url "admin.tcl"
        return [qc::cast next_url $next_url]
    } \
    -result {https://www.qcode.co.uk/admin.tcl}

test cast-next_url-1.1 \
    {cast next_url non-legacy 80 relative non-anchored} \
    -setup $setup \
    -cleanup $cleanup \
    -body {
        ns_conn _set protocol "http"
        ns_conn _set headers [ns_set create headers \
                                "Host" "www.qcode.co.uk" \
                             ]
        set next_url "admin.tcl"
        return [qc::cast next_url $next_url]
    } \
    -result {http://www.qcode.co.uk/admin.tcl}

test cast-next_url-1.1 \
    {cast next_url non-legacy 80 relative non-anchored proxied} \
    -setup $setup \
    -cleanup $cleanup \
    -body {
        ns_conn _set protocol "http"
        ns_conn _set headers [ns_set create headers \
                                "Host"              "www.qcode.co.uk" \
                                "X-Forwarded-Proto" "https" \
                             ]
        set next_url "admin.tcl"
        return [qc::cast next_url $next_url]
    } \
    -result {https://www.qcode.co.uk/admin.tcl}

test cast-next_url-1.2 \
    {cast next_url non-legacy custom relative non-anchored} \
    -setup $setup \
    -cleanup $cleanup \
    -body {
        ns_conn _set protocol "https"
        ns_conn _set headers [ns_set create headers \
                                "Host" "www.qcode.co.uk:8443" \
                             ]
        set next_url "admin.tcl"
        return [qc::cast next_url $next_url]
    } \
    -result {https://www.qcode.co.uk:8443/admin.tcl}

test cast-next_url-1.3 \
    {cast next_url non-legacy relative anchored} \
    -setup $setup \
    -cleanup $cleanup \
    -body {
        ns_conn _set protocol "https"
        ns_conn _set headers [ns_set create headers \
                                "Host" "www.qcode.co.uk" \
                             ]
        set next_url "/admin.tcl"
        return [qc::cast next_url $next_url]
    } \
    -result {https://www.qcode.co.uk/admin.tcl}

test cast-next_url-1.4 \
    {cast next_url non-legacy absolute} \
    -setup $setup \
    -cleanup $cleanup \
    -body {
        ns_conn _set protocol "https"
        ns_conn _set headers [ns_set create headers \
                                "Host" "www.qcode.co.uk" \
                             ]
        set next_url "https://www.qcode.co.uk/admin.tcl"
        return [qc::cast next_url $next_url]
    } \
    -result {https://www.qcode.co.uk/admin.tcl}

test cast-next_url-1.5 \
    {cast next_url legacy 443 relative non-anchored} \
    -setup $setup \
    -cleanup $cleanup \
    -body {
        ns_conn _set protocol "https"
        ns_conn _set headers  [ns_set create headers \
                                 "Host" "www.qcode.co.uk" \
                                 "Port" "443" \
                              ]
        set next_url "admin.tcl"
        return [qc::cast next_url $next_url]
    } \
    -result {https://www.qcode.co.uk/admin.tcl}

test cast-next_url-1.6 \
    {cast next_url legacy 80 relative non-anchored} \
    -setup $setup \
    -cleanup $cleanup \
    -body {
        ns_conn _set protocol "http"
        ns_conn _set headers  [ns_set create headers \
                                 "Host" "www.qcode.co.uk" \
                                 "Port" "80" \
                              ]
        set next_url "admin.tcl"
        return [qc::cast next_url $next_url]
    } \
    -result {http://www.qcode.co.uk/admin.tcl}

test cast-next_url-1.7 \
    {cast next_url legacy custom relative non-anchored} \
    -setup $setup \
    -cleanup $cleanup \
    -body {
        ns_conn _set protocol "https"
        ns_conn _set headers  [ns_set create headers \
                                 "Host" "www.qcode.co.uk" \
                                 "Port" "8443" \
                              ]
        set next_url "admin.tcl"
        return [qc::cast next_url $next_url]
    } \
    -result {https://www.qcode.co.uk:8443/admin.tcl}

test cast-next_url-1.8 \
    {cast next_url legacy relative anchored} \
    -setup $setup \
    -cleanup $cleanup \
    -body {
        ns_conn _set protocol "https"
        ns_conn _set headers  [ns_set create headers \
                                 "Host" "www.qcode.co.uk" \
                                 "Port" "443" \
                              ]
        set next_url "/admin.tcl"
        return [qc::cast next_url $next_url]
    } \
    -result {https://www.qcode.co.uk/admin.tcl}

test cast-next_url-1.9 \
    {cast next_url legacy absolute} \
    -setup $setup \
    -cleanup $cleanup \
    -body {
        ns_conn _set protocol "https"
        ns_conn _set headers  [ns_set create headers \
                                 "Host" "www.qcode.co.uk" \
                                 "Port" "443" \
                              ]
        set next_url "https://www.qcode.co.uk/admin.tcl"
        return [qc::cast next_url $next_url]
    } \
    -result {https://www.qcode.co.uk/admin.tcl}

test cast-next_url-1.10 \
    {cast next_url non-legacy cross domain} \
    -setup $setup \
    -cleanup $cleanup \
    -body {
        ns_conn _set protocol "https"
        ns_conn _set headers [ns_set create headers \
                                "Host" "www.qcode.co.uk" \
                             ]
        set next_url "https://www.anotherdomain.co.uk/admin.tcl"
        return [qc::cast next_url $next_url]
    } \
    -returnCodes error \
    -result {Could not cast "https://www.anotherdomain.co.uk/admin.tcl" to valid next_url. Domain must be "www.qcode.co.uk".}

test cast-next_url-1.11 \
    {cast next_url non-legacy invalid} \
    -setup $setup \
    -cleanup $cleanup \
    -body {
        ns_conn _set protocol "https"
        ns_conn _set headers [ns_set create headers \
                                "Host" "www.qcode.co.uk" \
                             ]
        set next_url "https://www.qcode.co.uk/<script>hello;<script>"
        return [qc::cast next_url $next_url]
    } \
    -returnCodes error \
    -result {Could not cast "https://www.qcode.co.uk/&lt;script&gt;hello;&lt;script&gt;" to valid next_url. Invalid URL.}

test cast-next_url-1.12 \
    {cast next_url http/1.0} \
    -setup $setup \
    -cleanup $cleanup \
    -body {
        ns_conn _set protocol "https"
        ns_conn _set location "https://www.fallback.co.uk"
        ns_conn _set headers [ns_set create headers \
                                "Host" "" \
                             ]
        set next_url "/admin.tcl"
        return [qc::cast next_url $next_url]
    } \
    -result {https://www.fallback.co.uk/admin.tcl}

test cast-next_url-1.13 \
    {cast next_url http/1.0} \
    -setup $setup \
    -cleanup $cleanup \
    -body {

        ns_conn _set protocol "https"
        ns_conn _set location "https://www.fallback.co.uk"
        ns_conn _set headers [ns_set create headers \
                                "Host" "" \
                             ]
        set next_url "admin.tcl"
        return [qc::cast next_url $next_url]
    } \
    -result {https://www.fallback.co.uk/admin.tcl}

cleanupTests
