package require tcltest
package require json
namespace import ::tcltest::test ::tcltest::cleanupTests ::tcltest::testConstraint

# Load all .tcl files
package require fileutil
set files [lsort [fileutil::findByPattern "~/qcode-tcl/tcl" "*.tcl"]]
foreach file $files {
    source $file
}
namespace import ::qc::*

if { [expr {[catch {exec sudo docker ps}] == 0}] } {
    # Docker installed, try to start httpbin
    puts "Docker installed..."
    if { [exec {*}[list sudo docker images -q kennethreitz/httpbin:latest]] eq "" } {
        # Pull image
        puts "Pulling kennethreitz/httpbin:latest..."
        exec {*}[list sudo docker pull kennethreitz/httpbin]
    } else {
        puts "Image kennethreitz/httpbin:latest present..."
    }
    if { [exec {*}[list sudo docker ps --quiet --filter "name=qcode-tcl-tests"]] eq "" } {
        puts "httpbin not running - starting..."
        set container_id [exec {*}[list \
                            sudo docker run \
                            --name qcode-tcl-tests \
                            --detach \
                            --publish 8081:80 \
                            kennethreitz/httpbin \
                          ] \
                 ]
        # Hack to ensure the container is fully started
        after 1000
    } else {
        puts "httpbin already running setting httpbin_running constraint"
    }

    testConstraint httpbin_running true
}

test http_encoding-1.0 {http_encoding xml } -setup {
} -body {
    http_encoding {} {<?xml version="1.0" encoding="utf-8"?>
        <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <soap:Body>
        <Response xmlns="https://www.example.com">
        <Result>
        <ClientHeader>
        <PassKey>999</PassKey>
        </ClientHeader>
        <Type>TEST</Type>
        <Data>Testing</Data
        </Result>
        </Response>
        </soap:Body>
        </soap:Envelope>}
} -result {utf-8}

test http_encoding-1.1 {http_encoding xml default} -setup {
} -body {
    http_encoding {} {<?xml version="1.0"?>
        <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <soap:Body>
        <Response xmlns="https://www.example.com">
        <Result>
        <ClientHeader>
        <PassKey>999</PassKey>
        </ClientHeader>
        <Type>TEST</Type>
        <Data>Testing</Data
        </Result>
        </Response>
        </soap:Body>
        </soap:Envelope>}
} -result {utf-8}

test http_encoding-1.2 {http_encoding http charset} -setup {
} -body {
    http_encoding {Content-Type {text/html; charset=utf-8}} {}
} -result {utf-8}

test http_encoding-1.3 {http_encoding http charset not found} -setup {
} -body {
    http_encoding {Accept-Encoding gzip} {}
} -result {iso8859-1}

test http_encoding-1.4 {http_encoding http long headers } -setup {
} -body {
    http_encoding {Accept-Encoding gzip Content-Type {text/html; charset=utf-16} Transfer-Encoding chunked Accept-Language Fr Host fr.yahoo.com} {}
} -result {unicode}

test http_encoding-1.5 {http_encoding http long headers no charset } -setup {
} -body {
    http_encoding {Accept-Encoding gzip Content-Type {text/html} Transfer-Encoding chunked Accept-Language Fr Host fr.yahoo.com} {}
} -result {iso8859-1}

test http_header_encoding-1.0 {http_header_encoding no charset } -setup {
} -body {
    http_header_encoding {Accept-Encoding gzip Content-Type {text/html} Transfer-Encoding chunked Accept-Language Fr Host fr.yahoo.com}
} -result {}

test http_header_encoding-1.1 {http_header_encoding charset } -setup {
} -body {
    http_header_encoding {Accept-Encoding gzip Content-Type {text/html; charset=utf-16} Transfer-Encoding chunked Accept-Language Fr Host fr.yahoo.com}
} -result {unicode}

test http_header_encoding-1.2 {http_header_encoding empty headers } -setup {
} -body {
    http_header_encoding {}
} -result {}

test IANAEncoding2TclEncoding-1.0 {IANAEncoding2TclEncoding utf-8 upper} -setup {
} -body {
    IANAEncoding2TclEncoding {UTF-8}
} -result {utf-8}

test IANAEncoding2TclEncoding-1.1 {IANAEncoding2TclEncoding error} -setup {
} -body {
    IANAEncoding2TclEncoding {qwerty}
} -returnCodes 1 -result {Unrecognized encoding name 'qwerty'}

test IANAEncoding2TclEncoding-1.1 {IANAEncoding2TclEncoding latin} -setup {
} -body {
    IANAEncoding2TclEncoding {latin1}
} -result {iso8859-1}

test http_header-1.0 {http_header ok} -setup {} -body {
    http_header Content-Type application/json
} -result {Content-Type: application/json}
test http_header-1.1 {http_header error} -setup {} -body {
    http_header Rest-Sign "aHNkZnNqa2ZsanNkZmFzZGdkZmFnZmFnYWdmZ2FkZ2FnYXNkZmFmZ2FkZ2Zhc2RmYWdmYWdmZHNh\nZ3dnZXJhZWJ6aHJoYWVk"
} -returnCodes 1 -result "The value of http header, \"Rest-Sign: aHNkZnNqa2ZsanNkZmFzZGdkZmFnZmFnYWdmZ2FkZ2FnYXNkZmFmZ2FkZ2Zhc2RmYWdmYWdmZHNh\nZ3dnZXJhZWJ6aHJoYWVk\", contains newline characters."

test http_post-1.0 {http_post} \
    -constraints {httpbin_running} \
    -body {
        set response [http_post \
                    -timeout 30 \
                    -content-type "text/plain; charset=utf-8" \
                    -- \
                    http://localhost:8081/post data "Here's the POST data" \
                 ]
        set dict [::json::json2dict $response]
        dict get $dict data
    } -result {data=Here%27s%20the%20POST%20data}

test http_post-1.1 {http_post (multipart)} \
    -constraints {httpbin_running} \
    -setup {} \
    -body {
        set data [list {name foo contents Apples} {name bar contents Oranges}]
        set response [http_post \
                        -content-type "multipart/form-data" \
                        -data $data \
                        http://localhost:8081/post \
                    ]
        set dict [::json::json2dict $response]

        # Check Content-Type
        if { ! [string match \
                    {multipart/form-data; boundary=*} \
                    [dict get $dict headers Content-Type] \
               ] } {
            error "Content-Type mismatch"
        }

        # Check form data
        foreach {name value} {
            foo Apples
            bar Oranges
        } {
            if { [dict get $dict form $name] ne $value } {
                error "Data mismatch"
            }
        }

        return true
    } \
    -result true

test http_post-1.2 {http_post resp_code} \
    -constraints {httpbin_running} \
    -body {
        set response [http_post \
                    -timeout 30 \
                    -content-type "text/plain; charset=utf-8" \
                    -response_code true \
                    -- \
                    http://localhost:8081/post data "Here's the POST data" \
                 ]
        set data [::json::json2dict [dict get $response body]]
        return "[dict get $response code] - [dict get $data data]"
    } -result {200 - data=Here%27s%20the%20POST%20data}

test http_post-1.3 {http_post resp_code_err} \
    -constraints {httpbin_running} \
    -body {
        set response [http_post \
                    -timeout 30 \
                    -content-type "text/plain; charset=utf-8" \
                    -valid_response_codes [list 200 401] \
                    -response_code true \
                    -- \
                    http://localhost:8081/status/401 data "Here's the POST data" \
                 ]
        return "[dict get $response code]"
    } -result {401}

test http_put-1.0 {http_put} \
    -constraints {httpbin_running} \
    -body {
        set response [http_put \
                    -timeout 30 \
                    -headers [list Content-Type "text/plain; charset=utf-8"] \
                    -data "Here's the PUT data" \
                    -- \
                    http://localhost:8081/put \
                 ]
        set dict [::json::json2dict $response]
        dict get $dict data
    } -result {Here's the PUT data}

test http_put-1.1 {http_put resp_code} \
    -constraints {httpbin_running} \
    -body {
        set response [http_put \
                    -timeout 30 \
                    -headers [list Content-Type "text/plain; charset=utf-8"] \
                    -data "Here's the PUT data" \
                    -response_code true \
                    -- \
                    http://localhost:8081/put \
                 ]
        set data [::json::json2dict [dict get $response body]]
        return "[dict get $response code] - [dict get $data data]"
    } -result {200 - Here's the PUT data}

test http_put-1.2 {http_put resp_code_err} \
    -constraints {httpbin_running} \
    -body {
        set response [http_put \
                    -timeout 30 \
                    -headers [list Content-Type "text/plain; charset=utf-8"] \
                    -valid_response_codes [list 200 401] \
                    -response_code true \
                    -data "Here's the PUT data" \
                    -- \
                    http://localhost:8081/status/401 \
                 ]
        return "[dict get $response code]"
    } -result {401}

test http_put-1.3 {http_put resp_headers} \
    -constraints {httpbin_running} \
    -body {
        set response [http_put \
                    -timeout 30 \
                    -headers [list Content-Type "text/plain; charset=utf-8"] \
                    -response_headers true \
                    -data "Here's the PUT data" \
                    -- \
                    http://localhost:8081/put \
                 ]
        return "[dict exists $response headers]"
    } -result {1}

test http_put-1.4 {http_put resp_code_err} \
    -constraints {httpbin_running} \
    -body {
        set response [http_put \
                    -timeout 30 \
                    -headers [list Content-Type "text/plain; charset=utf-8"] \
                    -response_headers true \
                    -response_code true \
                    -data "Here's the PUT data" \
                    -- \
                    http://localhost:8081/put \
                 ]
        if { ![dict exists $response code] } {
            error "Missing response code"
        }
        if { ![dict exists $response headers] } {
            error "Missing response headers"
        }
        return true
    } -result {true}

test http_put-1.5 {http_put infile} \
    -constraints {httpbin_running} \
    -setup {
        qc::file_write /tmp/http_put-1.5.txt [qc::.. 0 100]
    } \
    -body {
        set response [http_put \
                    -timeout 30 \
                    -infile /tmp/http_put-1.5.txt \
                    -- \
                    http://localhost:8081/put \
                 ]
        set dict [::json::json2dict $response]
        if { [dict get $dict data] eq [qc::.. 0 100] } {
            return true
        } else {
            error "http_put infile mismatch"
        }
    } -cleanup {
        file delete -force /tmp/http_put-1.5.txt
    } -result {true}
  

test http_header_parse-1.0 {http_header_parse simple} -setup {} -body {
    return [qc::http_header_parse "Connection" "keep-alive"]
} -result {{token keep-alive params {}}}

test http_header_parse-1.1 {http_header_parse complex} -setup {} -body {
    return [qc::http_header_parse "Accept" "application/json;indent=4, text/xml;q=0.7,text/html;level=1;q=0.9,   */*;q=0.01"]
} -result {{token application/json params {indent 4}} {token text/xml params {q 0.7}} {token text/html params {level 1 q 0.9}} {token */* params {q 0.01}}}

test http_header_parse-1.2 {http_header_parse header with no tokens} -setup {} -body {
    return [qc::http_header_parse "Cookie" "sessionID=9b885685d094057a08e8a117f28a1f406d28bcb7;_gat=1;logged_in=yes;tz=Europe%2FLondon"]
} -result {{token {} params {sessionID 9b885685d094057a08e8a117f28a1f406d28bcb7 _gat 1 logged_in yes tz Europe%2FLondon}}}

test http_header_sort_by_weight-1.0 {http_header_sort_values_by_weight OK} -setup {} -body {
    set accept_header [qc::http_header_parse "Accept" "application/json;indent=4,text/xml;q=0.7,text/html;level=1;q=0.9,*/*;q=0.01"]
    return [qc::http_header_sort_values_by_weight $accept_header]
} -result {{token application/json params {indent 4}} {token text/html params {level 1 q 0.9}} {token text/xml params {q 0.7}} {token */* params {q 0.01}}}

test http_exists-1.0 {http_exists true} \
    -constraints {httpbin_running} \
    -body {
        http_exists -timeout 30 -- http://localhost:8081/
    } \
    -result {true}

test http_exists-1.1 {http_exists false} \
    -constraints {httpbin_running} \
    -body {
        http_exists -timeout 30 -- http://localhost:8081/idontexist
    } -result {false}

test http_head-1.0 {http_head} \
    -constraints {httpbin_running} \
    -body {
        set response [qc::http_head \
                            -timeout 30 \
                            http://localhost:8081/response-headers?test=hello \
                     ]
        if { [dict exists $response test] } {
            return [dict get $response test]
        } else {
            return ""
        }
    } \
    -result {hello}

test http_patch-1.0  \
    {Send an HTTP PATCH request with JSON payload.} \
    -constraints {httpbin_running} \
    -setup {} \
    -body {
        set data {{"test": "this is a test"}}
        set response [http_patch \
                          -headers {Content-Type application/json} \
                          -data $data \
                          -- \
                          http://localhost:8081/patch]
        set dict [::json::json2dict $response]

        # Check Content-Type submitted to endpoint.
        if { [dict get $dict headers "Content-Type"] ne "application/json" } {
            error "Content-Type mismatch"
        }

        # Check JSON
        if { ![dict exists $dict json test] } {
            error "JSON key missing"
        } elseif { [dict get $dict json test] ne "this is a test" } {
            error "JSON value mismatch"
        }

        return true
    } -result true

test http_patch-1.1  \
    {Send an HTTP PATCH request with JSON payload and include headers and code in response.} \
    -constraints {httpbin_running} \
    -setup {} \
    -body {
        set data {{"test": "this is a test"}}
        set response [http_patch \
                          -headers {Content-Type application/json} \
                          -data $data \
                          -response_code true \
                          -response_headers true \
                          -- \
                          http://localhost:8081/patch]
        set dict [::json::json2dict [dict get $response body]]

        # Check Content-Type submitted to endpoint.
        if { [dict get $dict headers "Content-Type"] ne "application/json" } {
            error "Content-Type mismatch"
        }

        # Check JSON
        if { ![dict exists $dict json test] } {
            error "JSON key missing"
        } elseif { [dict get $dict json test] ne "this is a test" } {
            error "JSON value mismatch"
        }

        set response_headers [dict get $response headers]
        set response_code [dict get $response code]

        if { [dict size $response_headers] == 0 } {
            error "Missing response headers"
        }

        if { $response_code eq "" } {
            error "Missing response code"
        }

        return true
    } -result true

test http_save-1.0 {http_save} \
    -constraints {httpbin_running} \
    -body {
        set tmp_file /tmp/[qc::uuid]
        http_save \
            -timeout 5 \
            -- \
            http://localhost:8081/html \
            $tmp_file
        set fh [open $tmp_file r]
        set data [read $fh]
        close $fh
        file delete -force $tmp_file
        return [string bytelength $data]
    } \
    -result {3741}

test http_save-1.1 {http_save no exists} \
    -constraints {httpbin_running} \
    -body {
        http_save \
            -timeout 5 \
            -- \
            http://localhost:8081/dontexist \
            $tmp_file
    } -returnCodes {error} \
    -result {URL NOT FOUND http://localhost:8081/dontexist}

test http_save-1.2 {http_save with headers} \
    -constraints {httpbin_running} \
    -body {
        set tmp_file /tmp/[qc::uuid]
        http_save \
            -timeout 5 \
            -return_headers_var return_headers \
            -- \
            http://localhost:8081/html \
            $tmp_file
        file delete -force $tmp_file
        return [dict get $return_headers Content-Length]
    } \
    -result {3741}

# Stop container if runnng
::try {
    if { [set container_id \
            [exec {*}[list \
                        sudo docker ps \
                            --all \
                            --quiet \
                            --filter "name=qcode-tcl-tests" \
                     ] \
            ] \
        ] ne "" } {
        puts "Shutting down httpbin..."
        exec {*}[list sudo docker rm -f $container_id]
    }
} on error [list error_message options] {
}

cleanupTests
