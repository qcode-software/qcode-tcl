package require tcltest
package require Pgtcl
namespace import ::tcltest::test ::tcltest::cleanupTests ::tcltest::testConstraint

if { [info commands ns_db] ne "ns_db" } {
    # Load all .tcl files
    set files [lsort [glob -nocomplain "~/qcode-tcl/tcl/*.tcl"]]
    foreach file $files {
        source $file
    }
    namespace import ::qc::*

    # Superuser credentials
    set pgpass_filename $::env(HOME)/.pgpass
    if { [pgpass_credentials_exist $pgpass_filename template1] } {
        dict2vars [pgpass_credentials $pgpass_filename template1] {*}{
            hostname
            database
            port
            username
            password
        }
    } else {
        error "Missing pgpass entry for db template1"
    }
    set ::conn_info_superuser(host) $hostname
    set ::conn_info_superuser(dbname) $database
    set ::conn_info_superuser(port) $port
    set ::conn_info_superuser(user) $username
    set ::conn_info_superuser(password) $password

    # initialise db credentials

    set ::conn_info_test(host) $hostname
    set ::conn_info_test(port) $port
    array set ::conn_info_test {
        dbname test_database
        user test_user
        password test_password
    }
}

set db_setup_qry {
    create type image_resize_task_state as enum (
        'QUEUED',
        'PROCESSED',
        'ERROR'
    );

    create table if not exists file (
        file_id int primary key,
        user_id int not null,
        filename text not null,
        data bytea,
        upload_date timestamp without time zone default now(),
        mime_type text not null,
        s3_location text
    );

    create table if not exists image (
        file_id int primary key references file(file_id) on delete cascade,
        width int,
        height int,
        autocrop_width int,
        autocrop_height int
    );

    create table if not exists image_resize_task (
        row_id int primary key,
        file_id int not null references image(file_id) on delete cascade,
        cache_dir text not null,
        height int not null,
        width int not null,
        autocrop boolean not null,
        date_added timestamptz not null,
        date_processed timestamptz,
        task_state image_resize_task_state not null,
        mime_type text not null
    );

    create sequence if not exists file_id_seq;
    create sequence if not exists row_id_seq;
}

set db_cleanup_qry {
    drop table image_resize_task;
    drop table image;
    drop table file;
    drop type image_resize_task_state;
    drop sequence file_id_seq;
    drop sequence row_id_seq;
}

set setup_inside_naviserver {
    set db [qc::db_get_handle]
    ns_db dml $db $db_setup_qry
}

set setup_outside_naviserver {
    set conn_superuser [pg_connect -connlist [array get ::conn_info_superuser]]
    pg_execute $conn_superuser {create database test_database}
    pg_execute $conn_superuser {
        create user test_user with password 'test_password';
        grant all privileges on database test_database to test_user;
    }
    pg_disconnect $conn_superuser

    set conn [qc::db_connect {*}[array get ::conn_info_test]]
    pg_execute $conn $db_setup_qry
}

set cleanup_inside_naviserver {
    # Cleanup the qc::db connection
    set db [qc::db_get_handle]
    ns_db dml $db $db_cleanup_qry
}

set cleanup_outside_naviserver {
    set conn [qc::db_connect {*}[array get ::conn_info_test]]
    pg_execute $conn $db_cleanup_qry
    qc::db_disconnect

    set conn_superuser [pg_connect -connlist [array get ::conn_info_superuser]]
    pg_execute $conn_superuser {
        drop database if exists test_database
    }
    pg_execute $conn_superuser {
        drop role if exists test_user;
    }
    pg_disconnect $conn_superuser
}

set data_setup {
    proc ns_pagepath {} {
        return ""
    }

    set user_id 0

    qc::auth_as_user $user_id

    qc::db_trans_start

    set filename "logo_qcode_420x120.png"
    set mime_type "image/png"
    set width 420
    set height 120
    set new_width 210
    set new_height 60
    set id [open "~/qcode-tcl/test/images/${filename}" r]
    fconfigure $id -translation binary
    set data [base64::encode [read $id]]
    close $id
    set file_id [qc::db_seq "file_id_seq"]

    db_dml {
        insert into file (
            file_id,
            user_id,
            filename,
            data,
            mime_type
        ) values (
            :file_id,
            :user_id,
            :filename,
            decode(:data, 'base64'),
            :mime_type
        );
    }

    set cache_dir "/tmp/image-cache-test"

    db_dml "
        insert into image
        [qc::sql_insert {*}{
            file_id
            height
            width
        }]
    "
}

set data_cleanup {
    qc::db_trans_abort
    qc::auth_logout
}

if { [info commands ns_db] eq "ns_db" } {
    set setup $setup_inside_naviserver
    append setup $data_setup

    set cleanup $data_cleanup
    append cleanup $cleanup_inside_naviserver
} else {
    set setup $setup_outside_naviserver
    append setup $data_setup

    set cleanup $data_cleanup
    append cleanup $cleanup_outside_naviserver
}

test image_resize_task_add-1.0 \
    {Check that an image resize task can be added.} \
    -setup $setup \
    -cleanup $cleanup \
    -body {
        set row_id [qc::image_resize_task_add \
                        -mime_type $mime_type \
                        -cache_dir $cache_dir \
                        -- \
                        $file_id \
                        $new_width \
                        $new_height]
        set task_state "QUEUED"
        set expected [qc::dict_from {*}{
            file_id
            cache_dir
            new_height
            new_width
            task_state
            mime_type
        }]
        set task [lindex [qc::db_select_ldict {
            select
            file_id,
            cache_dir,
            height as new_height,
            width as new_width,
            task_state,
            mime_type

            from
            image_resize_task

            where
            row_id=:row_id
        }] 0]

        return [qc::dicts_equal $expected $task]
    } \
    -result true

cleanupTests
