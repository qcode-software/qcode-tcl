package require tcltest
eval ::tcltest::configure $argv

# Load all .tcl files
set files [lsort [glob -nocomplain [file join "../tcl" *.tcl]]]
foreach file $files {
    source $file
}

namespace eval ::qcode::test {
    namespace import ::tcltest::*
    namespace path ::qc

    test lshift-1.0 {lshift return value} -setup {
        set test_list [list a b c]
    } -body {
        lshift test_list
    } -cleanup {unset test_list} -result {a}

    test lshift-1.1 {lshift list contents} -setup {
        set test_list [list a b c]
        lshift test_list
    } -body {
       set test_list
    } -cleanup {unset test_list} -result {b c}

    test lshift-1.2 {lshift single item return value} -setup {
        set test_list [list a]
    } -body {
        lshift test_list
    } -cleanup {unset test_list} -result {a}

    test lshift-1.3 {lshift single item list contents} -setup {
        set test_list [list a]
        lshift test_list
    } -body {
       set test_list
    } -cleanup {unset test_list} -result {}

    test lshift-1.4 {lshift empty return value} -setup {
        set test_list [list] 
    } -body {
        lshift test_list
    } -cleanup {unset test_list} -result {}

    test lshift-1.5 {lshift empty list contents} -setup {
        set test_list [list]
        lshift test_list
    } -body {
       set test_list
    } -cleanup {unset test_list} -result {}

    test lunshift-1.0 {lunshift } -setup {
        set test_list [list a b c]
    } -body {
        lunshift test_list z
    } -cleanup {unset test_list} -result {z a b c}

    test lunshift-1.1 {lunshift item into empty} -setup {
        set test_list [list]
    } -body {
        lunshift test_list z
    } -cleanup {unset test_list} -result {z}

    test lunshift-1.2 {lunshift empty into empty} -setup {
        set test_list [list]
    } -body {
        lunshift test_list {}
    } -cleanup {unset test_list} -result {{}}
    
    testConstraint earlier_than_8.5 [expr {$tcl_version<8.5}]
    test lreverse-1.0 {lreverse } -constraints earlier_than_8.5 -setup {
    } -body {
        lreverse [list a b c d]
    } -cleanup {} -result {d c b a}

    test lintersect-1.0 {lintersect } -setup {
    } -body {
        lintersect [list a b c d e] [list d e f g h]
    } -cleanup {} -result {d e}

    test lintersect-1.1 {lintersect empty} -setup {
    } -body {
        lintersect [list a b c d e] [list z y]
    } -cleanup {} -result {}

    test lintersect-1.2 {lintersect same} -setup {
    } -body {
        lintersect [list a b c d e] [list a b c d e]
    } -cleanup {} -result {a b c d e}

    test lintersect-1.3 {lintersect empty and empty} -setup {
    } -body {
        lintersect [list] [list]
    } -cleanup {} -result {}

    test lexclude-1.0 {lexclude } -setup {
    } -body {
        lexclude [list a b c d e] d e f g h
    } -cleanup {} -result {a b c}

    test lexclude-1.1 {lexclude nothing to do} -setup {
    } -body {
        lexclude [list a b c d e] z y x
    } -cleanup {} -result {a b c d e}

    test lexclude-1.2 {lexclude empty result} -setup {
    } -body {
        lexclude [list a b c d e] e d c b a
    } -cleanup {} -result {}

    test lexclude-1.3 {lexclude empty list} -setup {
    } -body {
        lexclude [list] e d c b a
    } -cleanup {} -result {}

    test lexclude-1.4 {lexclude multiple values} -setup {
    } -body {
        lexclude [list 1 2 2 2 3 4 2 3 2 2 2] 2
    } -cleanup {} -result {1 3 4 3}

    test lexclude2-1.0 {lexclude2 } -constraints knownBug -setup {
    } -body {
        lexclude2 [list a b c d e] d e f g h
    } -cleanup {} -result {a b c}

    test lexclude2-1.1 {lexclude2 nothing to do} -constraints knownBug -setup {
    } -body {
        lexclude2 [list a b c d e] z y x
    } -cleanup {} -result {a b c d e}

    test lexclude2-1.2 {lexclude2 empty result} -constraints knownBug -setup {
    } -body {
        lexclude2 [list a b c d e] e d c b a
    } -cleanup {} -result {}

    test lexclude2-1.3 {lexclude2 empty list} -constraints knownBug -setup {
    } -body {
        lexclude2 [list] e d c b a
    } -cleanup {} -result {}

    test lexclude2-1.4 {lexclude2 multiple values} -constraints knownBug -setup {
    } -body {
        lexclude2 [list 1 2 2 2 3 4 2 3 2 2 2] 2
    } -cleanup {} -result {1 3 4 3}

    test lunion-1.0 {lunion } -setup {
    } -body {
        lunion [list a b c d e] [list d e f g h]
    } -cleanup {} -result {a b c d e f g h}

    test lunion-1.1 {lunion repetition} -setup {
    } -body {
        lunion [list a b c d e] [list d e e e f g g h]
    } -cleanup {} -result {a b c d e f g h}

    test lunion-1.2 {lunion empty} -setup {
    } -body {
        lunion [list a b c d e] [list]
    } -cleanup {} -result {a b c d e} 

    test lunion-1.3 {lunion empty and empty} -setup {
    } -body {
        lunion [list] [list]
    } -cleanup {} -result {} 

    test ldelete-1.0 {ldelete } -setup {
        set test_list [list 2007 2008 2009 2012]
    } -body {
        ldelete test_list 1
    } -cleanup {unset test_list} -result {2007 2009 2012}

    test ldelete-1.1 {ldelete invalid index} -setup {
        set test_list [list 2007 2008 2009 2012]
    } -body {
        ldelete test_list 5
    } -returnCodes 0 -cleanup {unset test_list} -result {2007 2008 2009 2012}

    test lmove-1.0 {lmove to end} -setup {
    } -body {
        lmove [list 2007 2008 2009 2012] 0 3
    } -cleanup {} -result {2008 2009 2012 2007}

    test lmove-1.1 {lmove invalid index} -setup {
    } -body {
        lmove [list 2007 2008 2009 2012] 0 6
    }  -cleanup {} -result {2008 2009 2012 2007}

    test lmove-1.2 {lmove to middle} -setup {
    } -body {
        lmove [list 2007 2008 2009 2012] 0 2
    } -cleanup {} -result {2008 2009 2007 2012}

    test lmove-1.3 {lmove nothing to do} -setup {
    } -body {
        lmove [list 2007 2008 2009 2012] 0 0
    } -cleanup {} -result {2007 2008 2009 2012}

    test lunique-1.0 {lunique } -setup {
    } -body {
        lunique [list 1 1 1 2 2 3 3 3 3 4 4 4 5 5 5 5 5 6 7 8]
    } -cleanup {} -result {1 2 3 4 5 6 7 8}

    test lunique-1.1 {lunique nothing to do} -setup {
    } -body {
        lunique [list 1 2 3 4 5 6 7 8]
    } -cleanup {} -result {1 2 3 4 5 6 7 8}

    test lunique-1.2 {lunique empty} -setup {
    } -body {
        lunique [list]
    } -cleanup {} -result {}

    test lunique-1.3 {lunique single result} -setup {
    } -body {
        lunique [list 1 1 1 1 1 1 1]
    } -cleanup {} -result {1}

    # lequal
    test lequal-1.0 {lequal true} -setup {
    } -body {
        lequal [list a b c] [list a b c]
    } -cleanup {} -result {1}

    test lequal-1.1 {lequal false} -setup {
    } -body {
        lequal [list a b c] [list c b a]
    } -cleanup {} -result {0}

    test lequal-1.2 {lequal different lengths} -setup {
    } -body {
        lequal [list a b c ""] [list a b c]
    } -cleanup {} -result {0}

    test lequal-1.3 {lequal nested} -setup {
    } -body {
        lequal [list [list a b] [list c d]] [list [list a b] [list c d]]
    } -cleanup {} -result {1}

    test lequal-1.4 {lequal non-list-parseable} -setup {
    } -body {
        lequal [list {"}] [list {"}]
    } -cleanup {} -result {1}

    test lequal-1.5 {lequal nested non-equal} -setup {
    } -body {
        lequal [list [list b a] [list d c]] [list [list a b] [list c d]]
    } -cleanup {} -result {0}

    # lsort
    test lsort_using-1.0 {lsort_using } -setup {
    } -body {
        lsort_using [list T W E Q] {Q W E R T Y}
    } -cleanup {} -result {Q W E T}

    test lsort_using-1.1 {lsort_using no match} -setup {
    } -body {
        lsort_using [list A S D F] {Q W E R T Y}
    } -cleanup {} -result {A S D F}

    test lsort_using-1.2 {lsort_using empty} -setup {
    } -body {
        lsort_using [list] {Q W E R T Y}
    } -cleanup {} -result {}

    test lsort_using-1.3 {lsort_using single} -setup {
    } -body {
        lsort_using [list E] {Q W E R T Y}
    } -cleanup {} -result {E}

    test in-1.0 {in } -setup {
    } -body {
        in [list Q W E R T Y] W 
    } -cleanup {} -result {1}

    test in-1.1 {in false} -setup {
    } -body {
        in [list Q W E R T Y] Z 
    } -cleanup {} -result {0}

    test in-1.2 {in empty} -setup {
    } -body {
        in [list] Z 
    } -cleanup {} -result {0}

    test lpage-1.0 {lpage } -setup {
    } -body {
        lpage [list {code AA sales 9.99} {code BB sales 0} {code CC sales 100} {code DD sales 32} {code EE sales 65}] 3
    } -cleanup {} -result {{{code AA sales 9.99} {code BB sales 0} {code CC sales 100}} {{code DD sales 32} {code EE sales 65} {}}}

    test lpage-1.1 {lpage size 1 } -setup {
    } -body {
        lpage [list {code AA sales 9.99} {code BB sales 0} {code CC sales 100} {code DD sales 32} {code EE sales 65}] 1
    } -cleanup {} -result {{{code AA sales 9.99}} {{code BB sales 0}} {{code CC sales 100}} {{code DD sales 32}} {{code EE sales 65}}}

    test lpage-1.2 {lpage oversize page} -setup {
    } -body {
        lpage [list {code AA sales 9.99} {code BB sales 0} {code CC sales 100} {code DD sales 32} {code EE sales 65}] 9
    } -cleanup {} -result {{{code AA sales 9.99} {code BB sales 0} {code CC sales 100} {code DD sales 32} {code EE sales 65} {} {} {} {}}}

    test lpage-1.3 {lpage empty } -setup {
    } -body {
        lpage [list] 3
    } -cleanup {} -result {{{} {} {}}}

    test ltotitle-1.0 {ltotitle } -setup {
    } -body {
        ltotitle [list jeff tom cctv dave KERRY]
    } -cleanup {} -result {Jeff Tom CCTV Dave Kerry}

    #TODO not sure if this is intended behaviour
    test ltotitle-1.1 {ltotitle quoted item} -setup {
    } -body {
        ltotitle [list jeff {"tom"} cctv dave KERRY]
    } -cleanup {} -result {jeff {"tom"} cctv dave KERRY}

    # list2csv
    test list2csv-1.0 {list2csv } -setup {
    } -body {
        list2csv [list Jeff Tom Dave Kerry]
    } -cleanup {} -result {Jeff,Tom,Dave,Kerry}

    test list2csv-1.1 {list2csv quoted item} -setup {
    } -body {
        list2csv [list Jeff Tom {Dave "The Drummer"} Kerry]
    } -cleanup {} -result {Jeff,Tom,"Dave ""The Drummer""",Kerry}

    test list2csv-1.2 {list2csv custom delimiter} -setup {
    } -body {
        list2csv [list Jeff Tom Dave Kerry] "|"
    } -cleanup {} -result {Jeff|Tom|Dave|Kerry}

    test list2csv-1.3 {list2csv custom delimiter quoted item} -setup {
    } -body {
        list2csv [list Jeff Tom {Dave "The Drummer"} Kerry] "|"
    } -cleanup {} -result {Jeff|Tom|"Dave ""The Drummer"""|Kerry}

    test list2csv-1.4 {list2csv single} -setup {
    } -body {
        list2csv [list Jeff] "|"
    } -cleanup {} -result {Jeff}

    test list2csv-1.5 {list2csv empty} -setup {
    } -body {
        list2csv [list] 
    } -cleanup {} -result {}

    test list2csv-1.6 {list2csv quote newlines} -setup {
    } -body {
        list2csv [list Jeff "Tom\r\n" Dave "Kerry\n"]
    } -cleanup {} -result "Jeff,\"Tom\r\n\",Dave,\"Kerry\n\""

    test list2csv-1.7 {list2csv quote commas} -setup {
    } -body {
        list2csv [list "hello" "world, apples"]
    } -cleanup {} -result {hello,"world, apples"}

    test list2csv-1.8 {list2csv quote commas in first string} -setup {
    } -body {
        list2csv [list "hello, world" "apples"]
    } -cleanup {} -result {"hello, world",apples}

    # lconcat
    test lconcat-1.0 {lconcat result} -setup {
        set test_list [list Q W E R T Y]
    } -body {
        lconcat test_list [list A S D F G]
    } -cleanup {unset test_list} -result {Q W E R T Y A S D F G}

    test lconcat-1.1 {lconcat value} -setup {
        set test_list [list Q W E R T Y]
        lconcat test_list [list A S D F G]
    } -body {
        set test_list
    } -cleanup {unset test_list} -result {Q W E R T Y A S D F G}

    test lconcat-1.2 {lconcat empty 1} -setup {
        set test_list [list Q W E R T Y]
    } -body {
        lconcat test_list [list]
    } -cleanup {unset test_list} -result {Q W E R T Y}

    test lconcat-1.3 {lconcat empty 2} -setup {
        set test_list [list]
    } -body {
        lconcat test_list [list A S D F G]
    } -cleanup {unset test_list} -result {A S D F G}

    test lconcat-1.4 {lconcat empty 3} -setup {
        set test_list [list]
    } -body {
        lconcat test_list [list]
    } -cleanup {unset test_list} -result {}

    test lsum-1.0 {lsum } -setup {
    } -body {
        lsum [list 2 2 2 2]
    } -cleanup {} -result {8}

    test lsum-1.1 {lsum single} -setup {
    } -body {
        lsum [list 2]
    } -cleanup {} -result {2}

    test lsum-1.2 {lsum exponentials} -setup {
    } -body {
        lsum [list 2e11 -2e11]
    } -cleanup {} -result {0.0}

    test lsum-1.3 {lsum large} -setup {
    } -body {
        lsum [list 2e21 2e31 2e41 2e51 2e61 2e71 2e81]
    } -cleanup {} -result {2.0000000001999997e+81}

    test lsum-1.4 {lsum floats} -setup {
    } -body {
        lsum [list 0.002 0.003 0.003 0.002]
    } -cleanup {} -result {0.01}

    #TODO Correct?
    test lsum-1.5 {lsum empty} -setup {
    } -body {
        lsum [list]
    } -cleanup {} -result {0}

    test lsum-1.6 {lsum non numberic} -setup {
    } -body {
        lsum [list Abba Steps {S Club}]
    } -returnCodes 1 -cleanup {} -result {can't use non-numeric string as operand of "+"}

    test laverage-1.0 {laverage } -setup {
    } -body {
        laverage [list 1 2 1 2 2 100]
    } -cleanup {} -result {18.0}

    test laverage-1.1 {laverage single } -setup {
    } -body {
        laverage [list 100]
    } -cleanup {} -result {100.0}

    test laverage-1.2 {laverage non-numeric } -setup {
    } -body {
        laverage [list Bauhaus {The Mission} {Sisters of Mercy}]
    } -returnCodes 1 -cleanup {} -result {can't use non-numeric string as operand of "+"}

    test laverage-1.3 {laverage large } -setup {
    } -body {
        laverage [list 100000000 99999999999999 121212121212121 2323232323232323]
    } -cleanup {} -result {636111136111110.8}

    test laverage-1.4 {laverage many } -setup {
    } -body {
        laverage [list 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 100000]
    } -cleanup {} -result {356.8683274021352}

    test lreplace_values-1.0 {lreplace_values } -setup {
    } -body {
        lreplace_values [list 1 2 1 2 2 100] 2 999
    } -cleanup {} -result {1 999 1 999 999 100}

    test lreplace_values-1.1 {lreplace_values nothing to do} -setup {
    } -body {
        lreplace_values [list 1 2 1 2 2 100] 3 999
    } -cleanup {} -result {1 2 1 2 2 100}

    test lreplace_values-1.2 {lreplace_values replace with empty} -setup {
    } -body {
        lreplace_values [list 1 2 1 2 2 100] 2 {}
    } -cleanup {} -result {1 {} 1 {} {} 100}

    test lreplace_values-1.3 {lreplace_values empty} -setup {
    } -body {
        lreplace_values [list] 2 999
    } -cleanup {} -result {}

    test lapply-1.0 {lapply } -setup {
        proc ::qcode::test::user_get { id } {
            set user_dict [dict create 1 Kagan 2 Boot 3 Bolton 4 Scheunemann 5 Sagan]
            return [dict get $user_dict $id]
        }
    } -body {
        lapply ::qcode::test::user_get [list 1 2 5] 
    } -cleanup {rename user_get ""} -result {Kagan Boot Sagan}

    test lapply-1.1 {lapply empty} -setup {
        proc ::qcode::test::user_get { id } {
            set user_dict [dict create 1 Kagan 2 Boot 3 Bolton 4 Scheunemann 5 Sagan]
            return [dict get $user_dict $id]
        }
    } -body {
        lapply ::qcode::test::user_get [list] 
    } -cleanup {rename ::qcode::test::user_get ""} -result {}

    test lapply-1.2 {lapply error from proc} -setup {
        proc ::qcode::test::user_get { id } {
            error "Something bad happened"
        }
    } -body {
        lapply ::qcode::test::user_get [list 1 2 5] 
    } -returnCodes 1 -cleanup {rename ::qcode::test::user_get ""} -result {Something bad happened}

    test lapply-1.3 {lapply proc does not exist} -setup {
    } -body {
        lapply ::qcode::test::user_get [list 1 2 5] 
    } -returnCodes 1 -cleanup {} -result {invalid command name "::qcode::test::user_get"}

    cleanupTests
}
namespace delete ::qcode::test
