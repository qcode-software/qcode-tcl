package require tcltest
namespace import ::tcltest::test ::tcltest::cleanupTests ::tcltest::testConstraint

# Load all .tcl files
set files [lsort [glob -nocomplain [file join [file dirname [file normalize [info script]]] "../tcl" *.tcl]]]
foreach file $files {
    source $file
}
namespace import ::qc::*

test sql_where-1.0 {sql_where} -setup {
} -body {
    sql_where name "Townes Van Zandt" email "townes@tecumseh.com"
} -cleanup {} -result {name='Townes Van Zandt' and email='townes@tecumseh.com'}

test sql_where-1.1 {sql_where null} -setup {
} -body {
    sql_where name NULL email "townes@tecumseh.com"
} -cleanup {} -result {name IS NULL and email='townes@tecumseh.com'}

test sql_where-1.2 {sql_where empty string} -setup {
} -body {
    sql_where name "" email "townes@tecumseh.com"
} -cleanup {} -result {email='townes@tecumseh.com'}

test sql_where-1.3 {sql_where nothing to do} -setup {
} -body {
    sql_where name "" email ""
} -cleanup {} -result {true}

test sql_where-1.4 {sql_where need quoting} -setup {
} -body {
    sql_where name "Townes O'Reilly" email ""
} -cleanup {} -result {name='Townes O''Reilly'}

test sql_where-1.5 {sql_where type} -setup {
} -body {
    sql_where -type text name "Townes van Zandt" tel_no 1234
} -cleanup {} -result {name='Townes van Zandt'::text and tel_no='1234'::text}

test sql_where-1.6 {sql_where by name} -setup {
    set name "Townes Van Zandt"
    set email "townes@tecumseh.com"
} -body {
    sql_where ~ name email 
} -cleanup {} -result {name='Townes Van Zandt' and email='townes@tecumseh.com'}

test sql_where-1.7 {sql_where by name typed} -setup {
    set name "Townes Van Zandt"
    set tel_no 1234
} -body {
    sql_where -type text ~ name tel_no
} -cleanup {} -result {name='Townes Van Zandt'::text and tel_no='1234'::text}

test sql_where_like-1.0 {sql_where_like} -setup {
} -body {
    sql_where_like name "Townes Van Zandt" email "townes@tecumseh.com"
} -cleanup {} -result {name ~~* '%Townes%' and name ~~* '%Van%' and name ~~* '%Zandt%' and email ~~* '%townes@tecumseh.com%'}

test sql_where_like-1.1 {sql_where_like null} -setup {
} -body {
    sql_where_like name ""
} -cleanup {} -result {true}

test sql_where_like-1.2 {sql_where_like needs quoting} -setup {
} -body {
    sql_where_like name "Townes O'Reilly"
} -cleanup {} -result {name ~~* '%Townes%' and name ~~* '%O''Reilly%'}

test sql_where_cols_start-1.0 {sql_where_cols_start} -setup {
} -body {
    sql_where_cols_start  name "Townes Van" email "townes.van"
} -cleanup {} -result {name ~ '^Townes Van' and email ~ E'^townes\\.van'}

test sql_where_cols_start-1.1 {sql_where_cols_start nocase} -setup {
} -body {
    sql_where_cols_start -nocase name "Townes Van" email "townes.van"
} -cleanup {} -result {name ~* '^Townes Van' and email ~* E'^townes\\.van'}

test sql_where_cols_start-1.2 {sql_where_cols_start empty} -setup {
} -body {
    sql_where_cols_start name ""
} -cleanup {} -result {true}

test sql_where_col_starts-1.0 {sql_where_col_starts} -setup {
} -body {
    sql_where_col_starts  name "Townes Van" "townes.van"
} -cleanup {} -result {(name ~ '^Townes Van' or name ~ E'^townes\\.van')}

test sql_where_col_starts-1.1 {sql_where_col_starts nocase} -setup {
} -body {
    sql_where_col_starts -nocase name "Townes Van" "townes.van"
} -cleanup {} -result {(name ~* '^Townes Van' or name ~* E'^townes\\.van')}

test sql_where_col_starts-1.2 {sql_where_col_starts empty} -setup {
} -body {
    sql_where_col_starts name ""
} -cleanup {} -result {true}

test sql_where_col_starts-1.3 {sql_where_col_starts not} -setup {
} -body {
    sql_where_col_starts -not name "Townes Van" "townes.van"
} -cleanup {} -result {(name !~ '^Townes Van' and name !~ E'^townes\\.van')}

test sql_where_combo-1.0 {sql_where_combo} -setup {
} -body {
    sql_where_combo name "Townes Van Zandt"
} -cleanup {} -result {name ~* '^Townes Van Zandt'}

test sql_where_combo-1.1 {sql_where_combo empty} -setup {
} -body {
    sql_where_combo name ""
} -cleanup {} -result {true}

test sql_where_combo-1.2 {sql_where_combo escape} -setup {
} -body {
    sql_where_combo email "townes.van@zandt.com"
} -cleanup {} -result {email ~* E'^townes\\.van@zandt\\.com'}

test sql_where_compare_set-1.0 {sql_where_compare_set} -setup {
} -body {
    sql_where_compare_set order_date >= "2012-01-01"
} -cleanup {} -result {order_date>='2012-01-01'}

test sql_where_compare_set-1.1 {sql_where_compare_set unknown operator} -setup {
} -body {
    sql_where_compare_set order_date _ "2012-01-01"
} -returnCodes 1 -cleanup {} -result {Unknown operator _}

test sql_where_compare_set-1.2 {sql_where_compare_set is null} -setup {
} -body {
    sql_where_compare_set order_date = NULL
}  -cleanup {} -result {order_date IS NULL}

test sql_where_compare_set-1.3 {sql_where_compare_set empty} -setup {
} -body {
    sql_where_compare_set order_date <> ""
}  -cleanup {} -result {true}

test sql_where_compare_set-1.4 {sql_where_compare_set needs quoting} -setup {
} -body {
    sql_where_compare_set name <> "Bill O'Reilly"
}  -cleanup {} -result {name<>'Bill O''Reilly'}

test sql_where_compare_set-1.5 {sql_where_compare_set numeric} -setup {
} -body {
    sql_where_compare_set cost < 100
}  -cleanup {} -result {cost<'100'}

test sql_where_compare_set-1.6 {sql_where_compare_set numeric typed} -setup {
} -body {
    sql_where_compare_set -type int cost < 100
}  -cleanup {} -result {cost<100::int}

test sql_where_or-1.0 {sql_where_or} -setup {
} -body {
    sql_where_or name "Townes Van Zandt" email "townes.van@zandt.com"
} -cleanup {} -result {(name='Townes Van Zandt' or email='townes.van@zandt.com')}

test sql_where_or-1.1 {sql_where_or empty clause} -setup {
} -body {
    sql_where_or name "Townes Van Zandt" tel "" email "townes.van@zandt.com"
} -cleanup {} -result {(name='Townes Van Zandt' or email='townes.van@zandt.com')}

test sql_where_or-1.2 {sql_where_or all empty } -setup {
} -body {
    sql_where_or name "" tel "" email ""
} -cleanup {} -result {true}

test sql_where_or-1.3 {sql_where_or null } -setup {
} -body {
    sql_where_or name "Townes Van Zandt" tel NULL email "NOT NULL"
} -cleanup {} -result {(name='Townes Van Zandt' or tel IS NULL or email IS NOT NULL)}

test sql_where_or-1.4 {sql_where_or quote } -setup {
} -body {
    sql_where_or name "Bill O'Reilly" tel NULL email "NOT NULL"
} -cleanup {} -result {(name='Bill O''Reilly' or tel IS NULL or email IS NOT NULL)}

test sql_where_words_in-1.0 {sql_where_words_in} -setup {
} -body {
    qc::sql_where_words_in name "Van Zandt" 
} -cleanup {} -result {name ~ '( |^)Van( |$)' and name ~ '( |^)Zandt( |$)'}

test sql_where_words_in-1.1 {sql_where_words_in empty} -setup {
} -body {
    qc::sql_where_words_in tel "" 
} -cleanup {} -result {true}

test sql_where_phrase_words_in-1.0 {sql_where_phrase_words_in} -setup {
} -body {
    qc::sql_where_phrase_words_in name "Townes Van Zandt" "Johnny Cash" 
} -cleanup {} -result {((name ~ '( |^)Townes( |$)' and name ~ '( |^)Van( |$)' and name ~ '( |^)Zandt( |$)') or (name ~ '( |^)Johnny( |$)' and name ~ '( |^)Cash( |$)'))}

test sql_where_phrase_words_in-1.1 {sql_where_phrase_words_in all} -setup {
} -body {
    qc::sql_where_phrase_words_in -all name "Townes Van Zandt" "Johnny Cash" 
} -cleanup {} -result {(name ~ '( |^)Townes( |$)' and name ~ '( |^)Van( |$)' and name ~ '( |^)Zandt( |$)') and (name ~ '( |^)Johnny( |$)' and name ~ '( |^)Cash( |$)')}

test sql_where_phrases_in-1.0 {sql_where_phrases_in} -setup {
} -body {
    qc::sql_where_phrases_in name "Townes Van Zandt" "Johnny Cash"
} -cleanup {} -result {(name ~ '( |^)Townes Van Zandt( |$)' or name ~ '( |^)Johnny Cash( |$)')}

test sql_where_phrases_in-1.1 {sql_where_phrases_in all} -setup {
} -body {
    qc::sql_where_phrases_in -all name "Townes Van Zandt" "Johnny Cash"
} -cleanup {} -result {name ~ '( |^)Townes Van Zandt( |$)' and name ~ '( |^)Johnny Cash( |$)'}

test sql_where_phrases_in-1.2 {sql_where_phrases_in empty} -setup {
} -body {
    qc::sql_where_phrases_in name "Townes Van Zandt" ""
} -cleanup {} -result {name ~ '( |^)Townes Van Zandt( |$)'}

test sql_where_phrases_in-1.3 {sql_where_phrases_in all empty} -setup {
} -body {
    qc::sql_where_phrases_in name ""
} -cleanup {} -result {true}

cleanupTests
