package require tcltest
package require Pgtcl
namespace import ::tcltest::test ::tcltest::cleanupTests ::tcltest::testConstraint

if { [info commands ns_db] ne "ns_db" } {
    # Load all .tcl files
    package require fileutil
    set files [lsort [fileutil::findByPattern "~/qcode-tcl/tcl" "*.tcl"]]
    foreach file $files {
        source $file
    }
    namespace import ::qc::*

    # Superuser credentials
    set pgpass_filename $::env(HOME)/.pgpass
    if { [pgpass_credentials_exist $pgpass_filename template1] } {
        dict2vars [pgpass_credentials $pgpass_filename template1] {*}{
            hostname
            database
            port
            username
            password
        }
    } else {
        error "Missing pgpass entry for db template1"        
    }
    set ::conn_info_superuser(host) $hostname
    set ::conn_info_superuser(dbname) $database
    set ::conn_info_superuser(port) $port
    set ::conn_info_superuser(user) $username
    set ::conn_info_superuser(password) $password

    # initialise db credentials
    set ::conn_info_test(host) $hostname
    set ::conn_info_test(port) $port
    array set ::conn_info_test {
        dbname test_database
        user test_user
        password test_password
    }
}

set setup_qry {
    SET client_min_messages = WARNING;
    
    CREATE TABLE session (
        session_id text primary key,
        time_created timestamp without time zone default now(),
        time_modified timestamp without time zone default now(),
        hit_count int default 0,
        ip varchar(15),
        user_id int not null,
        effective_user_id int,
        authenticity_token varchar(100) not null
    );
}

set cleanup_qry {
    drop table session;
}

set setup_inside_naviserver {
    # The test user configuration.
    set db [qc::db_get_handle]
    ns_db dml $db $setup_qry
}

set setup_outside_naviserver {
    # The test user configuration.
    set conn_superuser [pg_connect -connlist [array get ::conn_info_superuser]]
    pg_execute $conn_superuser {CREATE DATABASE test_database}
    pg_execute $conn_superuser {
        SET client_min_messages TO WARNING;
        drop user if exists test_user;
        CREATE USER test_user WITH PASSWORD 'test_password';
        GRANT ALL PRIVILEGES ON DATABASE test_database TO test_user;
    }
    pg_disconnect $conn_superuser
    
    # Establish a connection the qc::db way
    set conn [qc::db_connect {*}[array get ::conn_info_test]]
    pg_execute $conn $setup_qry
}

set cleanup_inside_naviserver {
    # Cleanup the qc::db connection
    set db [qc::db_get_handle]
    ns_db dml $db $cleanup_qry 
}

set cleanup_outside_naviserver {
    # Cleanup the qc::db connection
    set conn [qc::db_connect {*}[array get ::conn_info_test]]
    pg_execute $conn $cleanup_qry
    qc::db_disconnect
    
    # Cleanup 
    set conn_superuser [pg_connect -connlist [array get ::conn_info_superuser]]
    pg_execute $conn_superuser {DROP DATABASE IF EXISTS test_database}
    pg_execute $conn_superuser {
        DROP ROLE IF EXISTS test_user;
    }
    pg_disconnect $conn_superuser
    
}

if { [info commands ns_db] eq "ns_db" } {
    set setup $setup_inside_naviserver
    set cleanup $cleanup_inside_naviserver
} else {
    set setup $setup_outside_naviserver
    set cleanup $cleanup_outside_naviserver
}

test session_new-1 \
    {Create a new session.} \
    -setup [join [list $setup {
        proc qc::conn_open {} { return false }
    }]] \
    -cleanup $cleanup \
    -body {
        set session_id [session_new 1]

        db_1row {select count(*) as count from session where session_id=:session_id}

        if { $count != 1 } {
            error "A session was not created."
        }

        set global_session_id [qc::session_id]

        if { $global_session_id ne $session_id } {
            error "The session id was not set globally."
        }

        return 1
    } \
    -result 1

cleanupTests

